# -*- coding: utf-8 -*-
"""SALES DATA ANALYSIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19x0sp8vaAE3xa6eMHGhVGm0Up9JksCwi

#Purpose: Analyze sales data to identify trends, top-selling products, and revenue metrics for business decision-making.
##Description:
 In this project, you will dive into a large sales dataset to extract valuable insights. You will explore sales trends over time, identify the best-selling products, calculate revenue metrics such as total sales and profit margins, and create visualizations to present your findings effectively. This project showcases your ability to manipulate and derive insights from large datasets, enabling you to make data-driven recommendations for optimizing sales strategies.

## Reading the dataset
"""

import pandas as pd
sales = pd.read_csv("sales.csv", index_col=0)
sales.head()

#describing the dataset
sales.describe()

#checking the data types
sales.dtypes

#checking for duplicated data
duplicated_sales= sales[sales.duplicated()]
#summing duplicated data
sum(sales.duplicated())

"""An output of 0 indicates there is no duplicated data"""

sales.tail()

"""## Checking the number of Entries"""

sales.shape

"""##Exploring Sales trends Over Time"""

import pandas as pd
import matplotlib.pyplot as plt



# Convert 'Order Date' to a datetime object
sales['Order Date'] = pd.to_datetime(sales['Order Date'])

# Extract month and year from 'Order Date'
sales['Month'] = sales['Order Date'].dt.month
sales['Year'] = sales['Order Date'].dt.year

# Group by month and calculate total sales
monthly_sales = sales.groupby(['Year', 'Month'])['Sales'].sum().reset_index()

# Create a line plot
plt.figure(figsize=(12, 6))
plt.plot(monthly_sales['Year'].astype(str) + '-' + monthly_sales['Month'].astype(str), monthly_sales['Sales'], marker='o')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Sales Trend Over Time')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""##Identifying Best Selling Products

"""

# Group by product and calculate total quantity sold
best_selling_products = sales.groupby('Product')['Quantity Ordered'].sum().reset_index()

# Sort by quantity sold in descending order to find the best-selling products
best_selling_products = best_selling_products.sort_values(by='Quantity Ordered', ascending=False)

# Display the top N best-selling products
N = 10
print(best_selling_products.head(N))

"""## Calculating  Revenue Metrics"""

import pandas as pd


# Calculate total sales
total_sales = sales['Sales'].sum()

# Calculate profit margins using 'Price Each' as the cost
sales['Profit'] = sales['Sales'] - (sales['Quantity Ordered'] * sales['Price Each'])
total_profit = sales['Profit'].sum()

# Calculate profit margin percentage
profit_margin_percentage = (total_profit / total_sales) * 100

# Display total sales and profit
print(f'Total Sales: ${total_sales:.2f}')
print(f'Total Profit: ${total_profit:.2f}')
print(f'Profit Margin: {profit_margin_percentage:.2f}%')

"""## A graph of Sales By City"""

city_sales = sales.groupby('City')['Sales'].sum().reset_index()


plt.figure(figsize=(12, 6))
plt.bar(city_sales['City'], city_sales['Sales'])
plt.xlabel('City')
plt.ylabel('Total Sales')
plt.title('City-wise Sales')
plt.xticks(rotation=90)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


N = 10  # Number of products to display


best_selling_products = best_selling_products.sort_values(by='Quantity Ordered', ascending=False)


top_products = best_selling_products.head(N)


plt.figure(figsize=(12, 6))
plt.barh(top_products['Product'], top_products['Quantity Ordered'], color='skyblue')
plt.xlabel('Quantity Ordered')
plt.ylabel('Product')
plt.title(f'Top {N} Best-Selling Products')
plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

product_prices = sales.groupby('Product')['Price Each'].mean().reset_index()
product_prices = product_prices.sort_values(by='Price Each', ascending=False)

plt.figure(figsize=(12, 6))
plt.barh(product_prices['Product'], product_prices['Price Each'], color='skyblue')
plt.xlabel('Price Each')
plt.ylabel('Product')
plt.title('Price Each vs. Product')
plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

#creating a new column named quater
sales['Quarter'] = (sales['Month'] - 1) // 3 + 1

# Group the data by 'Quarter' and 'Month' and calculate the sum of sales
quarterly_sales = sales.groupby(['Quarter', 'Month'])['Sales'].sum().reset_index()

# Find the month with the highest sales in each quarter
max_sales_months = quarterly_sales.groupby('Quarter')['Sales'].idxmax()

# Create a bar chart
plt.figure(figsize=(12, 6))
colors = ['skyblue', 'lightcoral', 'lightgreen', 'lightsalmon']

for quarter, color in zip(range(1, 5), colors):
    quarter_data = quarterly_sales[quarterly_sales['Quarter'] == quarter]
    plt.bar(quarter_data['Month'], quarter_data['Sales'], label=f'Q{quarter}', color=color)

plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Highest Sales Month in Each Quarter')
plt.xticks(range(1, 13), [str(i) for i in range(1, 13)])
plt.legend(title='Quarter')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt



# Convert 'Order Date' to a datetime object
sales['Order Date'] = pd.to_datetime(sales['Order Date'])

# Extract the hour from the 'Order Date' and create a new column
sales['Hour'] = sales['Order Date'].dt.hour

# Group the data by hour and count the number of orders in each hour
hourly_orders = sales.groupby('Hour').size().reset_index(name='Number of Orders')

# Create a bar chart
plt.figure(figsize=(12, 6))
plt.bar(hourly_orders['Hour'], hourly_orders['Number of Orders'], color='skyblue')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Orders')
plt.title('Number of Orders by Hour')
plt.xticks(range(24))
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


# Group the data by 'Product' and calculate the sum of quantity sold and total sales revenue
product_stats = sales.groupby('Product').agg({'Quantity Ordered': 'sum', 'Sales': 'sum'}).reset_index()

# Sort the products by both quantity sold and total sales revenue to find the best sellers
best_sellers_quantity = product_stats.sort_values(by='Quantity Ordered', ascending=False)
best_sellers_revenue = product_stats.sort_values(by='Sales', ascending=False)

# Plot the best-selling products based on quantity sold
plt.figure(figsize=(12, 6))
plt.bar(best_sellers_quantity['Product'][:10], best_sellers_quantity['Quantity Ordered'][:10], color='skyblue')
plt.xlabel('Product')
plt.ylabel('Total Quantity Sold')
plt.title('Top 10 Best-Selling Products by Quantity Sold')
plt.xticks(rotation=90)
plt.tight_layout()

# Plot the best-selling products based on total sales revenue
plt.figure(figsize=(12, 6))
plt.bar(best_sellers_revenue['Product'][:10], best_sellers_revenue['Sales'][:10], color='lightcoral')
plt.xlabel('Product')
plt.ylabel('Total Sales Revenue')
plt.title('Top 10 Best-Selling Products by Sales Revenue')
plt.xticks(rotation=90)
plt.tight_layout()

plt.show()

import pandas as pd
import matplotlib.pyplot as plt



# Convert 'Order Date' to a datetime object
sales['Order Date'] = pd.to_datetime(sales['Order Date'])

# Extract the month from the 'Order Date' and create a new column
sales['Month'] = sales['Order Date'].dt.month

# Group the data by month and calculate the total sales revenue for each month
monthly_revenue = sales.groupby('Month')['Sales'].sum().reset_index()

# Create a line chart to visualize the monthly trend of total sales revenue
plt.figure(figsize=(12, 6))
plt.plot(monthly_revenue['Month'], monthly_revenue['Sales'], marker='o', color='royalblue', linestyle='-', linewidth=2, markersize=8)
plt.xlabel('Month')
plt.ylabel('Total Sales Revenue')
plt.title('Monthly Trend of Total Sales Revenue')
plt.xticks(range(1, 13), [str(i) for i in range(1, 13)])
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
